function solve(input){
    var numLine = input[0].replace(/\D/g, ' ');
    numLine = numLine.replace(/\s{2,}/g, ' ').trim();
    var numArray = numLine.split(' ');
    var maxSequence = 0;
    var currentSeq;
    var currentType = [];
    for(var crntIdx = 0; crntIdx<numArray.length-1; crntIdx++){
        currentSeq = 1;
        currentType[0] = getType(numArray[crntIdx]);
        for(var nextIdx = crntIdx+1; nextIdx<numArray.length; nextIdx++){
            currentType[1] = getType(numArray[nextIdx]);
            //=============================================================
            if(currentType[0] === 'special' && currentType[0]===currentType[1]){
                currentSeq++;
                if(nextIdx === numArray.length-1){
                    maxSequence = Math.max(currentSeq, maxSequence);
                    break;
                }
                continue;
            }else if(currentType[0] === 'special' && currentType[0] !== currentType[1]){
                currentType[0] = getOpposite(currentType[1]);
            }else if(currentType[1] === 'special' && currentType[1] !== currentType[0]){
                currentType[1] = getOpposite(currentType[0]);
            }
            if(currentType[0] !== currentType[1]){
                currentSeq ++;
                currentType[0] = currentType[1];
                if(nextIdx === numArray.length-1){
                    maxSequence = Math.max(currentSeq, maxSequence);
                    break;
                }
            }else{
                maxSequence = Math.max(currentSeq, maxSequence);
                break;
            }
        }
    };
    console.log(maxSequence);


    function getType(num){
        if(Number(num) === 0){
            return 'special';
        }
        if(Number(num)%2 === 0){
            return 'even';
        }else{
            return 'odd';
        }
    };
    function getOpposite(type){
        if(type === 'odd'){
            return 'even';
        }else{
            return 'odd';
        }
    };
}


solve(['  (  1 )  ( 11 ) (    20 ) (15 ) (10)(0   ) (   2)(3) (4) (0) (6) (7) (8) (0) (10) (0) (-12)( 11 ) (    20 ) (15 ) (10)(0   ) (   2)(3) (4) (0) (6) (7) (8) (0) (10) (0) (-12)( 11 ) (    20 ) (15 ) (10)(0   ) (   2)(3) (4) (0) (6) (7) (8) (0) (10) (0) (-12)( 11 ) (    20 ) (15 ) (10)(0   ) (   2)(3) (4) (0) (6) (7) (8) (0) (10) (0) (-12) (4) (0) (6) (7) (8) (0) (10) (0) (-12) (4) (0) (6) (7) (8    ) (0) (10            ) (0) (-12) (4) (0) (6) (7) (8) (0) (10) (0) (-12) (4) (0) (6) (7) (8) (0) (10) (0) (-12) (4) (0) (6) (7) (8) (0) (10) (0) (-12) (4) (0) (6) (7) (8) (0    ) (        10) (0) (-12) (4) (0) (6) (7) (8) (0) (10)    (    0    )      (       -12       ) (4)(0)(6)(7) (8) (0        ) (10) (0) (-12)']);
solve(['  ( 2 )  ( 33 ) (1) (4)   (  -1  ) ']);
solve(['(1) (0) (0) (0) (0) (0) (0) (1)']);
solve(['(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2)(2) (2) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0)(2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (2) (  33) (44) (55  ) (0  ) (  77) (88) ( 0 )   (0) (  11  )(22)(0)(0)(0)(2  ) (0) (4) (1) (2) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)']);